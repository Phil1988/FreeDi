#####################################################################
# Advanced CHAMBER_TEMP_CONTROLLER
#####################################################################

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: BASE_SET_PRINT_STATS_INFO_BASE
gcode:
    #TIMELAPSE_TAKE_FRAME
    BASE_SET_PRINT_STATS_INFO_BASE {rawparams}
    CHAMBER_TEMP_CONTROLLER

# Safety macro that gets frequently called by SET_PRINT_STATS_INFO to prevent too high chamber temperatures
[gcode_macro CHAMBER_TEMP_CONTROLLER]
gcode:
    {% set chamber_target_temp = printer['heater_generic chamber'].target %}
    {% set chamber_temp = printer['heater_generic chamber'].temperature %}
    {% if chamber_temp > printer.configfile.settings['heater_generic chamber'].max_temp %}
        M106 P3 S255
    {% else %}
        {% if chamber_target_temp > 0 %}
            # Allow for 3C of "grace" before we start ramping the exhaust fan speed
            # This prevents the macro from fighting with the chamber heater PID algorithm
            {% set difference = chamber_temp - (chamber_target_temp + 3) %}
            {% if difference > 0 %}
                {% set filterfan_speed = ([(difference * 50), 255] | min) | int %}
                M106 P3 S{filterfan_speed}
            {% else %}
                M106 P3 S0
            {% endif %}
        {% endif %}
    {% endif %}
    
    
#####################################################################
# Homing modification
#####################################################################
[gcode_macro G28]
rename_existing: G28.1
gcode:
    {% set reduced_current_x = 0.6 %}
    {% set reduced_current_y = 0.6 %}
    {% set home_all = ('X' in rawparams.upper() and 'Y' in rawparams.upper() and 'Z' in rawparams.upper()) or 
                      ('X' not in rawparams.upper() and 'Y' not in rawparams.upper() and 'Z' not in rawparams.upper()) %}
    {% set home_current_x = printer.configfile.settings['tmc2209 stepper_x'].run_current * reduced_current_x %}
    {% set home_current_y = printer.configfile.settings['tmc2209 stepper_y'].run_current * reduced_current_y %}

    {% set init_XY_move = 30 %}
    #{% set y_init_move = 5 %}
    {% set z_clearance = 2 %}

    {% set home_all_final_position_x = printer.toolhead.axis_maximum.x / 2 %}
    {% set home_all_final_position_y = printer.toolhead.axis_maximum.y - 40 %}
    {% set home_all_final_position_z = 20 %}

    # If homing should at least move X or Y axis
    {% if home_all or 'X' in rawparams.upper() or 'Y' in rawparams.upper() %}     
        # Check if Z is homed
        {% if 'z' in printer.toolhead.homed_axes %}
            {% set Z_axis_was_homed = true %}                                                                       ; Set Z_axis_was_homed to true if Z is already homed
            G91                                                                                                     ; Use relative positioning
            G1 Z2 F600                                                                                              ; Move bed down
            G90                                                                                                     ; Use absolute positioning
        {% else %}
            {% set Z_axis_was_homed = false %}                                                                      ; Set Z_axis_was_homed to false if Z is not homed
            FORCE_MOVE STEPPER=stepper_z DISTANCE={z_clearance} VELOCITY=10                                         ; Move bed down
        {% endif %}
    {% endif %}

    {% if home_all or 'X' in rawparams.upper() or 'Y' in rawparams.upper() %} 
        G91                                                                                                         ; Use relative positioning
        FORCE_MOVE STEPPER=stepper_x DISTANCE={init_XY_move} VELOCITY=40                                            ; Move X a little before homing
        SET_KINEMATIC_POSITION X={printer.toolhead.position.x + (init_XY_move/2)}                                   ; Compensate the FORCE_MOVE position 
        SET_KINEMATIC_POSITION Y={printer.toolhead.position.y + (init_XY_move/2)}                                   ; Compensate the FORCE_MOVE position 
        G90                                                                                                         ; Use absolute positioning
    {% endif %}

    # Home Y
    {% if home_all or 'Y' in rawparams.upper() %}
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={home_current_y}                                                  ; Lower motor current
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={home_current_y}                                                  ; Lower motor current
        G28.1 Y                                                                                                     ; Home Y
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer.configfile.settings['tmc2209 stepper_x'].run_current}    ; Set motor current to the previous value
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer.configfile.settings['tmc2209 stepper_y'].run_current}    ; Set motor current to the previous value
        G1 Y10 F1200                                                                                                ; Move Y-axis slightly
    {% endif %}
    
    # Home X
    {% if home_all or 'X' in rawparams.upper() %}        
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={home_current_x}                                                  ; Lower motor current
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={home_current_x}                                                  ; Lower motor current
        G28.1 X                                                                                                     ; Home X
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer.configfile.settings['tmc2209 stepper_x'].run_current}    ; Set motor current to the previous value
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer.configfile.settings['tmc2209 stepper_y'].run_current}    ; Set motor current to the previous value
        G1 X10 F1200                                                                                                ; Move X-axis slightly
    {% endif %}

    # Raise the bed again if only X or only Y axes were homed
    {% if not (home_all or 'Z' in rawparams.upper()) %}
        {% if Z_axis_was_homed %}
            G91                                                                                                     ; Use relative positioning
            G1 Z-2 F600                                                                                             ; Raise the bed back again
            G90                                                                                                     ; Use absolute positioning
        {% else %}
            FORCE_MOVE STEPPER=stepper_z DISTANCE=-{z_clearance} VELOCITY=10                                        ; Raise the bed back again
        {% endif %}
    {% endif %}

    # Home Z
    {% if home_all or 'Z' in rawparams.upper() %}
        G28.1 Z                                                                                                     ; Home Z
        G90                                                                                                         ; Set absolute positioning
        G1 Z{home_all_final_position_z}                                                                             ; Move bed down   
    {% endif %}

    # Move to the final position if all axes were homed
    {% if home_all %}
        G90                                                                                                         ; Set absolute positioning
        G1 X{home_all_final_position_x} Y{home_all_final_position_y} Z{home_all_final_position_z} F7800             ; Move to the rear center
    {% endif %}


# Unconditional stop
[gcode_macro M0]
gcode:
    PAUSE


# Pause SD print
[gcode_macro M25]
rename_existing: M9925
gcode:
    PAUSE


########################################
# Basic Macros
########################################
[gcode_macro PRINT_START]
# Use PRINT_START for the slicer starting script
description: Start printing
gcode:
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=Mainboard_fan TARGET=1                                              ; Decrease the mainboard target temp to turn the fan on for driver cooling
    CLEAR_PAUSE                                                                                                    ; Clear existing pause states
    BED_MESH_CLEAR                                                                                                 ; Clear previous adaptive mesh


[gcode_macro PRINT_END]
gcode:
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% set z_clearance = 50 %}
    {% set z_hop = 2  %}

    {% if (printer.toolhead.position.z + z_clearance) < max_z %}
        {% set z_hop = 2  %}
    {% else %}
        {% set z_hop = 0 %}
    {% endif %}

    M106 P0 S0                                                                                                      ; Turn off part cooling fan
    #M106 P2 S0                                                                                                     ; Turn off side fan - dont use for X-Smart3
    M106 P3 S0                                                                                                      ; Turn off activated charcoal fan

    M104 S0                                                                                                         ; Turn off hotend
    M140 S0                                                                                                         ; Turn off heated bed
    M141 S0                                                                                                         ; Turn off heated chamber

    G91                                                                                                             ; Relative positioning
    G0 Z{z_hop} E-4.0 F3600                                                                                         ; Move nozzle up and retract filament
    G90                                                                                                             ; Absolute positioning
    G0 X{max_x/2} Y{max_y-40} F20000                                                                                ; Move nozzle to remove stringing
    _Z_CLEARANCE DISTANCE={z_clearance}                                                                             ; Lower bed
    M400                                                                                                            ; Wait for buffer to clear
    G92 E0                                                                                                          ; Zero the extruder

    M220 S100                                                                                                       ; Set feedrate (speed percentage) back to 100%
    M221 S100                                                                                                       ; Set flow percentage back to 100%

    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                                     ; Set timeout back to configured value
    CLEAR_PAUSE                                                                                                     ; Ensure pause state is cleared if applicable

    M84                                                                                                             ; Disable steppers
    BEEP I=2 DUR=500                                                                                                ; Alert at the end of the print (if sound is enabled)


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    {% set z_hop = params.Z|default(30)|int %}                                                                     ; Z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z_hop}                                                ; Set Z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}                          ; Set hotend temperature variable for reference in resume macro
        SAVE_GCODE_STATE NAME=PAUSE                                                                                ; Save current position for resume
        BASE_PAUSE                                                                                                 ; Pause print
        {% if (printer.gcode_move.position.z + z_hop) < printer.toolhead.axis_maximum.z %}                         ; Check that Z hop doesn't exceed Z max
            G91                                                                                                    ; Use Relative positioning
            G1 Z{z_hop} F600                                                                                       ; Raise Z up by Z hop amount
        {% else %}
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0                                                  ; Set Z hop to 0 if exceeds max
        {% endif %}
        SAVE_GCODE_STATE NAME=PAUSEPARK2
        G90                                                                                                        ; Absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-40} F6000                        ; Park toolhead  at rear center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                                            ; Save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                                                    ; Turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                                             ; Set timeout to 12 hours
        SET_STEPPER_ENABLE STEPPER=extruder enable=0                                                               ; Disable extruder stepper
    {% endif %}


[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    {% set e = params.E|default(2.5)|int %}                                                                        ; Hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                                ; Set idle timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                                                      ; Wait for hotend to heat up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=150                                                   ; Restore back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                                                        ; Relative positioning
        M83                                                                                                        ; Relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1  E{e} F900                                                                                          ; Prime nozzle
        {% endif %}  
        RESTORE_GCODE_STATE NAME=PAUSEPARK2 MOVE=1 MOVE_SPEED=150                           
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=10                                                        ; Restore position
        BASE_RESUME                                                                                                ; Resume print
        G90                                                                                                        ; Absolute positioning
    {% endif %}


[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:

    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% if (printer.toolhead.position.z + 12) < max_z %}
        {% set z_hop = 2  %}
    {% else %}
        {% set z_hop = 0 %}
    {% endif %}

    G91                                                                                                            ; Relative positioning
    G1 Z{z_hop} F600                                                                                               ; Do a tiny z-hop
    G90                                                                                                            ; Absolute positioning

    G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-40} F12000
    CLEAR_PAUSE
    SDCARD_RESET_FILE

    PRINT_END
    BASE_CANCEL_PRINT


[gcode_macro _Z_CLEARANCE]
description: Lower the bed to give some clearance
gcode:
    {% set current_z_height = printer.toolhead.position.z %}
    {% set max_z_height = printer.toolhead.axis_maximum.z %}
    {% set target_z_height = current_z_height + params.DISTANCE|default(5)|float %}

    G90                                                                                                            ; Absolute positioning
    G1 Z { [target_z_height, max_z_height]|min }


########################################
#  Filament Macros
########################################
[gcode_macro UNLOAD_FILAMENT]
description: Unloads filament from toolhead
gcode:
  {% set EXTRUDER_TEMP = params.TEMP|default(230)|int %}
  {% set CURRENT_TEMP = printer.extruder.temperature|int %}
  {% if CURRENT_TEMP < EXTRUDER_TEMP %}
    M109 S{EXTRUDER_TEMP}                                                                                          ; heat up the hotend
  {% endif %}  
  M83                                                                                                              ; set extruder to relative mode
  G1 E5 F150                                                                                                       ; extrude a small amount to elimate soften the filament
  G1 E-8 F1800                                                                                                     ; quickly retract a small amount to elimate stringing
  G4 P200                                                                                                          ; pause for a short amount of time
  G1 E-50 F300                                                                                                     ; retract slowly the rest of the way
  M400                                                                                                             ; wait for moves to finish
  M118 Unload Complete!


[gcode_macro LOAD_FILAMENT]
description: Loads filament to toolhead
gcode:
  {% set EXTRUDER_TEMP = params.TEMP|default(230)|int %}
  {% set CURRENT_TEMP = printer.extruder.temperature|int %}
  {% if CURRENT_TEMP < EXTRUDER_TEMP %}
    M109 S{EXTRUDER_TEMP}                                                                                          ; heat up the hotend
  {% endif %}
  M83                                                                                                              ; set extruder to relative mode
  G1 E5 F120                                                                                                       ; feed filament
  G1 E5 F300                                                                                                       ; feed filament
  G1 E40 F600                                                                                                      ; feed filament
  G1 E15 F300                                                                                                      ; feed filament
  G1 E15 F120                                                                                                      ; feed filament
  G4 P200                                                                                                          ; pause for a short amount of time
  G1 E10 F90                                                                                                       ; feed filament
  M400                                                                                                             ; wait for moves to finish
  M118 Load Complete!


# Filament runout sensor enable/disable
[gcode_macro M8029]
gcode:
     {% if params.D is defined %}
       {% if (params.D|int)==1 %} 
        SET_FILAMENT_SENSOR SENSOR=filament ENABLE=1
       {% endif %}
       {% if (params.D|int)==0 %} 
        SET_FILAMENT_SENSOR SENSOR=filament ENABLE=0
       {% endif %}
     {% endif %}


########################################
# Fan Macros
########################################
# Set Fan Speed macro
# Mainly name castings for nicer web interface names and display functionality
[gcode_macro M106]
rename_existing: M106.1
gcode:
    {% if params.P is defined %}
      {% if params.S is defined %}
        {% set speed = 0.003921*params.S|int %}
        {% if (params.P|int) == 0 %}
          M106.1 S{params.S|int}
        {% elif (params.P|int) == 2 %}
          # fix for X-Smart 3 "missing fan2" -> dont do anything
        {% elif (params.P|int) == 3 %}
          SET_FAN_SPEED FAN=filterfan SPEED={speed}
        {% else %}
          SET_FAN_SPEED FAN=fan{params.P|int} SPEED={speed}
        {% endif %}
      {% else %}
        {% if (params.P|int) == 0 %}
          M106.1 S255
        {% elif (params.P|int) == 2 %}
          # fix for X-Smart 3 "missing fan2" -> dont do anything
        {% elif (params.P|int) == 3 %}
          SET_FAN_SPEED FAN=filterfan SPEED=1
        {% else %}
          SET_FAN_SPEED FAN=fan{params.P|int} SPEED=1
        {% endif %}
      {% endif %}
    {% endif %} 

    {% if params.T is defined %}
      {% if (params.T|int) == -2 %}
        {% if params.S is defined %}
          {% set speed = 0.003921*params.S|int %}
          SET_FAN_SPEED FAN=filterfan SPEED={speed}
        {% else %}
          SET_FAN_SPEED FAN=filterfan SPEED=1
        {% endif %}
      {% endif %}
    {% endif %}

    {% if params.P is undefined %}
      {% if params.T is undefined %}
        {% if params.S is defined %}
          M106.1 S{params.S|int}
        {% else %}
          M106.1 S255
        {% endif %}
      {% endif %}
    {% endif %}

[gcode_macro M107]
rename_existing: M107.1
gcode:  
    M106.1 S0


########################################
# Temperature Macros
########################################
# Wait for Hotend Temperature
[gcode_macro M109]
rename_existing: M109.1
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}                                              ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}                                               ; Wait for hotend temp (within 1 degree)
    {% endif %}


# PID autotune
[gcode_macro M303]
gcode:
    {% if params.E is defined %}
     {% if params.S is defined %}
        {% if (params.E|int)==-1 %} 
         PID_CALIBRATE HEATER=heater_bed TARGET={params.S|int}
        {% endif %}
        {% if (params.E|int)==0 %}
         PID_CALIBRATE HEATER=extruder TARGET={params.S|int}
        {% endif %}
     {% endif %}
  {% endif %}


########################################
# Sound Macros
########################################
[gcode_macro BEEP]
gcode:
    # Parameters
    {% set i = params.I|default(1)|int %}                                                                        ; Iterations (number of times to beep).
    {% set dur = params.DUR|default(100)|int %}                                                                  ; Duration/wait of each beep in ms. Default 100ms.

    {% if printer["output_pin sound"].value|int == 1 %}
        {% for iteration in range(i|int) %}
            SET_PIN PIN=buzzer VALUE=1
            G4 P{dur}
            SET_PIN PIN=buzzer VALUE=0
            G4 P{dur}
        {% endfor %}
    {% endif %}


[gcode_macro beep_on]
gcode:
    SET_PIN PIN=buzzer VALUE=1


[gcode_macro beep_off]
gcode:
    SET_PIN PIN=buzzer VALUE=0


########################################
# Z-height Macros
########################################
# Bed Leveling (Unified)
[gcode_macro G29]
variable_k:1
gcode:
    {% if k|int==1 %}
        BED_MESH_CLEAR                                                                                           ; Clear levelling data
        BED_MESH_CALIBRATE ADAPTIVE=1 ADAPTIVE_MARGIN=5                                                          ; Start adaptive meshing
    {% endif %}   


# Babystep
[gcode_macro M290]
gcode:
   SET_GCODE_OFFSET Z_ADJUST={params.Z}


########################################
# Tuning Macros
########################################
[gcode_macro SHAPER_CALIBRATE]
rename_existing: RESHAPER_CALIBRATE
gcode:
    RESHAPER_CALIBRATE FREQ_START=30 FREQ_END=130


# Linear Advance Factor
[gcode_macro M900]
gcode:
    {% if params.K is defined %} 
          SET_PRESSURE_ADVANCE ADVANCE={params.K}
    {% endif %}  
    {% if params.T is defined %}    
       SET_PRESSURE_ADVANCE SMOOTH_TIME={params.T}
    {% endif %} 


# Set Starting Acceleration
[gcode_macro M204]
rename_existing: M99204
gcode:
    {% if params.S is defined %}
        {% set s = params.S|float %}
    {% endif %}
    {% if params.P is defined %}
    {% if params.T is defined %}
        {% set s = [params.P|float ,params.T|float] | min %}
    {% endif %}
    {% endif %}

    SET_VELOCITY_LIMIT ACCEL={s}
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={s/2}


# Bed leveling
# For more information, see https://www.klipper3d.org/Manual_Level.html#adjusting-bed-leveling-screws-using-the-bed-probe
[gcode_macro LEVEL_BED]
description: "Measure bed and calculate screw adjustments for manual bed leveling"
gcode:
    G28                                                                                                         ; Home all
    SCREWS_TILT_CALCULATE  


# Probe Calibration
# For more information, see https://www.klipper3d.org/Probe_Calibrate.html
[gcode_macro CALIBRATE_Z_OFFSET]
description: "Calibrate the Z offset using the probe"
gcode:
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}

    G28                                                                                                         ; Home all
    G0 Z10                                                                                                      ; Increase z clearance
    G0 X{max_x/2} Y{max_y-40} F6000                                                                             ; Move to bed center 
    PROBE_CALIBRATE                                                                                             ; Perform a probe calibration


# Nozzle PID tuning
# For more information, see https://www.klipper3d.org/Config_checks.html#calibrate-pid-settings
[gcode_macro NOZZLE_PID_TUNE]
description: "Perform PID tuning for the nozzle heater"
gcode:
    PID_CALIBRATE HEATER=extruder TARGET=220                                                                    ; PID tune the nozzle


# Bed PID tuning
# For more information, see https://www.klipper3d.org/Config_checks.html#calibrate-pid-settings
[gcode_macro BED_PID_TUNE]
description: "Perform PID tuning for the bed heater"
gcode:
    PID_CALIBRATE HEATER=heater_bed TARGET=80                                                                   ; PID tune the bed


########################################
# Macros for display functionallity
########################################
[gcode_macro INPUT_SHAPING_CALIBRATE]
description: "Perform Input Shaping calibration and save the results to printer.cfg"
gcode:
    SHAPER_CALIBRATE                                                                                            ; Step 1: Perform the Input Shaping calibration
    PAUSE                                                                                                       ; Step 2: Pause to allow the calibration to complete
    SAVE_CONFIG                                                                                                 ; Step 3: Save the configuration to printer.cfg
    RESTART                                                                                                     ; Step 4: Restart the firmware to apply the new settings

